### 06/11/2007
-The players are now in Tanks!!! :D
The canon rotates with the angle too (adding angle limits will be easy). I think we will need to add a vehicle class too.
-Added some new data:
data/vehicles/*
data/gfx_from_blobwars/*
-Added "Team" and "Vehicle" to player class
-Team name is now also displayed.
Note: I know DarkGuy also started implementing something for the team names, so this is currently only for fun and not definitive. :)

### 31/10/2007
-Text entry is working correctly. However, it will be necessary to adapt it to the current trunk using the event registration stuff.
-Added a DEBIAN/control file which I used to create a debian package. I'll be putting the package on the FTP. I made it with dpkg-deb only since I haven't learned how to use dh_make yet.
-Added "gp2d::SetDataDir(".");" so you can choose where the data folder is located. (was necessary to create a working debian package). See the GP2D changelog for more info.

### 10/10/2007
-Started working on text entry function for multiplayer chat
-Planning to implement some stuff from http://www.libsdl.org/projects/GUIlib/ into GP2D
-default key to go into chat mode is "return". Entering text doesn't work yet, but chat mode disables all other 
controls (except movement because this isn't handled in iteam.cpp)

### 26/08/2007
-Branch overwritten with modified Iteam-merge!
-Added a simple GUI:
*Click on options to change key configuration
*Click on multiplayer to start game
*Click on Quit to quit
-Close button now always works to close tha game
-Added a pause button to pause the game (going to the main menu also pauses the game)
-Added easier DrawRectangle and DrawLine functions to GP2D to implement the GUI

##############################################################

### 20/08/2007
-Added Mickey's explosion animations (couldn't resist ^^). It works, but there are some problems with the positioning of the animation in the case of the clusterbombs for example.
-Reworked my TODO list and structured it a little bit more.
(also contains some crazy suggestions at the end. ;) )
-Files added:
*explosions.h
*explosions.cpp

### 19/08/2007
-Made keyboard "less" responsive (action at key press, except for movement keys and other)
-added mouse interactions:
*left-click: set shooting angle
*middle-click: add new player
*right-click: place current player
-Game can now be closed by sending a close event (click on close button, alt+F4, etc.)
-Bouncing is now done according to the collision slope (try out gp2d_test in my library branch to see how it works). But the MoveMe functions still need to be reworked. And friction might eventually need to be added.
-Solved to "lift bug" which made players always go up as long as there is a collision. Consequence: if they ever land (or are placed) inside the terrain, they'll be stuck... But they can be freed by blasting the terrain away. xD
-Note: Those changes required changes in the GP2D library, so you'll have to change the library to make them effective ;)
-Functions changed:
*int MoveMe() now returns 0 if there was a collision and 0 otherwise. (was necessary for missiles)
*void DoWeaponBehaviours(int TypeID,int CompID,int collision=0);
-Functions added (for correct bouncing):
*iteam_maths.h: int T_reflect_vector(double Tx, double Ty, double Vx, double Vy, GLfloat &Vpx, GLfloat &Vpy);
*iteam_maths.h: int N_reflect_vector(double Nx, double Ny, double Vx, double Vy, GLfloat &Vpx, GLfloat &Vpy);

### 17/08/2007
-Made clusterbombs work: one bomb creating several smaller bombs after "explosion". :D
Code may not be optimal, but it works. ^^
-uploaded correct weapon_selector (32x32)
-added "Active" to weapon class
-Removed redundant terrain destruction stuff from "DoWeaponBehaviours"
-function prototype changes:
*void DoWeaponBehaviours(int TypeID,int CompID);
*void AddComponent(int WeaponID, int TypeID, const char texture[], bool IsPhysical=true, bool Bounces=true, GLfloat BlastRadius=0, GLfloat BlastFactor=0, GLfloat BlastDamage=0, GLfloat Elasticity=0, int TriggerTime=0, bool Active=true, GLfloat scale=1);
-functions added:
*int FireComponent(int TypeID, int CompID, GLfloat nx, GLfloat ny, GLfloat vel_x, GLfloat vel_y);

### 16/08/2007
-save/load settings class works correctly

### 15/08/2007
IMPORTANT:
-Clarified physics engine code and made player/weapons physics code as similar as possible to make common class creation easier
-Implemented SetAcceleration and CalcAcceleration (necessary for the rockets).
-There are now 2 different accelerations in PlayerObj and weapon: accel_x/accel_y and obj_accel_x/obj_accel_y, where obj_accel_x/obj_accel_y are the objects own/internal acceleration. CalcAcceleration then adds the external accelerations like gravity, friction, wind, etc to obtain accel_x/accel_y.

Other:
-Since some people asked for it, I did it: You can't walk in the air anymore!
The drawback is that the animation now looks weird when walking on the ground. To implement this change, I used CanJump which is true if the player has a collision with the ground and false otherwise. (might give some problems when it's top collision...)
-Added "FacingRight=Mirror" to the FlipFireAngle function to solve a little bug making you moonwalk if you continue in the same direction after switching direction by changing the angle
-Solved all-white weapon_selector problem by using 32x32 image and scaling it by 38/32. ;)
-Added missile, clusterbomb and pistol as selectable weapons :D (clusterbomb and pistol not yet fully functional, but soon. Clusterbomb can already be thrown.)
-Added BlastFactor and BlastDamage to the weapon class
-Created a BlastObjects function to apply blast effect to all physical objects (weapons+players)
-Damage now also depends on the distance to the blast
-Added fstream save/load functions for the settings to make it simpler, but load doesn't seem to work right yet. :(
-Added bounce in X direction temporarily
-Simplified mickey's math functions (I hope the angle calculation is correct since I haven't tested it yet.)

### 13/08/2007
-Little Makefile improvement
-create settings file (mainly key configuration) DONE (forgot it last time ^^')
You can now change the key configuration in the ~/.i-team/settings.txt file (created automatically after the first run of the game). Requires knowledge of the keycodes for the moment. ;)
-doxygen descriptions added for each source file
-Implemented Mike's halo :)
-Changed char *Name to char Name[256] in the PlayerObj Class (and then set player name with strcpy/sprintf)
-Added some initializations to the PlayerObj constructor, especially LastTicks which was essential to avoid disappearing players
-Health now displayed above player
-Modified/simplified switch player so that it works for more than 2 players
-Added function to drop in new players (default key: n)
The game starts lagging when I reach 15-20 players. XD
-Made the start positions random (50<X<180)
-Added weapon switching button (default: b) and weapon selector image (currently has a transparency pb, but it works)
-Added blast effect for dynamite

### 12/08/2007

IMPORTANT:
Makefile changed to be able to use "make clean" and only compile what has been modified
Correct the $(EXE) target according to your architecture. Or just type "make linuxXX".
The Makefile doesn't react to changes of headers yet.

Files added:
-settings.h
-settings.cpp
-added physics.h
-added physics.cpp
-iteam_maths.h
-iteam_maths.cpp
-primitives.h
-primitives.cpp
-TODO
-Changelog
-BUGS (Yep, I have already discovered some. :/ )

Modifications made:
-add physics for characters DONE
-Added "Health" to the players class and initialized it at 100.
-make bomb blast affect characters (health and blast effect) :) DONE
-UpdatePhysicalObjects from weapons.cpp has been replaced by ProcessAllPhysicalObjects from physics.cpp (based on mickey's code)
-#defines for keys added
-Makefile: created CPP_FILES and EXE variables containing source files and exe name
-Implemented mickey's exploding bombs! :D
-Replaced drawGUI with drawGUI from mickey
-Same with weapon clusters + weapon functions
-Test_Init -> Weapons_Init
-Test_Fire -> Weapons_Fire
-Simplified the "DistanceBetween" function ;)
-ai.cpp/ai.h -> iteam-ai.cpp/iteam-ai.h (fusioned my functions with those of mickey)
-add mickey's bombs and turning arrow DONE
-iteam.cpp: GLfloat IT_Angle = 0 now unused since we use Player[CurPlayer].Angle instead. (this means that a new class member "TiltAngle" for player tilting was needed)
-iteam.cpp: GLfloat IT_WeaponStrentgh = 10 now unused since we use Player[CurPlayer].Power instead.
-players.h:
	+GLfloat TiltAngle;	/**< Player's angle (for terrain tilting). */
	int Angle -> GLfloat Angle;		/**< Player's shooting angle. */
-Make the characters face the right direction when shooting DONE
-Started adding doxygen-style comments
-Create two other functions calc_angle and calc_vector: DONE
calc_angle returns flighttime+angle for a given velocity
calc_vector returns angle+vector for a given flighttime
-Make the calc_velocity function also return the flighttime (by reference). DONE
-The 3 calc functions for the AI now return true if the shot is possible and false otherwise. Return values are passed by reference.
-Lots of Text displays added for testing... :)
-Added a "delta_time" member to the weapons class to make sure the CaclulateVelocity and MoveMe functions use the same lapse of time when modifying velocity and position!!! The main physics calculation process has temporarily been regrouped in "UpdatePhysicalObjects". "MoveMe" is now run before "CalculateVelocity".

### xx/xx/xxxx

Modifications made:
-Add #ifndef, #endif to my ai.h header. DONE
-Return 0 for impossible shots DONE
-Add key to decrease angle (only noticed this now because not really needed ^^) DONE
-Also modify linux64+win32 compilation commands... DONE

### xx/xx/xxxx

Files added:
-ai.h
-ai.cpp

Files modified:
I don't remember exactly which ones, but mainly:
-Makefile (compilation line for linux32)
-weapons.h and weapons.cpp
-weapons.cpp
-iteam.cpp

Modifications made:
-added ai.cpp to the linux 32 compilation line
-replaced IT_GRAVITY with IT_GRAVITY_DEFAULT in the #define and with "Gravity" in the rest of the code, initializing it with IT_GRAVITY_DEFAULT.
The declaration is in weapons.cpp and in globals.h as extern.
-Added a "SetVelocity" function to the weapons class because it's easier to set an initial velocity instead of an initial acceleration.
-Changed the "CaclulateVelocity" function, so that it calculates the new velocities the physically correct way:
V=a*t+V0 where V is the new velocity, V0 the initial velocity, "a" the acceleration and "t" the time.
vel_x += GetDelta(accel_x, newTicks);
vel_y += GetDelta(accel_y, newTicks);
-Added a display of the current gravity as well as a way to modify it. Have fun with low, strong, positive and negative gravities.
-Added enable/disable music keys because I like listening to music while programming. (doesn't mean the current game music isn't good of course... ^^)
-Added a key to decrease the WeaponStrength. (couldn't use "+" for that because I have a laptop azerty keyboard and need to press shift to access it. )
-Changed the "increase WeaponStrength" key for more "logic" because of this.
-Corrected some spelling errors: lenght->length and strenght->strength
