CC=g++ -g

#-----------------------------------------------------------------------------
# CFLAGS: Used for compiling. Flag -fPIC is specifically for compilation to
# shared libraries.
#-----------------------------------------------------------------------------
CFLAGS= -I. \
        -I/usr/local/include \
        `sdl-config --cflags` \
        -Wall -O2
         
#-----------------------------------------------------------------------------
# LDFLAGS: Used for the linker.
#-----------------------------------------------------------------------------        
LDFLAGS=`sdl-config --libs` \
        -lSDL \
        -lSDLmain \
        -lSDL_net \
        -lSDL_mixer \
        -lSDL_image \
        -lSDL_ttf \
		-lopengl32 \
		-lglu32 \
		-lglut32

#-----------------------------------------------------------------------------
# A few variables:
#   BINARY_SO: the shared object's name to be generated.
# 	BIN: the location where the binaries (*.o and executables) need to be
#	SRC: the source directory of the test.cpp's.
#-----------------------------------------------------------------------------
BINARY_SO=libgp2d.dll
BINARY_EXEC=test

# Target and source directories.
SRC=./src
BIN=./bin

# The object files after compiling.
OBJECTS_MAIN=$(BIN)/graphics.o $(BIN)/core.o $(BIN)/input.o $(BIN)/collision.o $(BIN)/framerate.o $(BIN)/text.o $(BIN)/physics.o #$(BIN)/network.o

OBJECTS_TEST=$(BIN)/test.o $(OBJECTS_MAIN)
OBJECTS_TEST2=$(BIN)/test2.o $(OBJECTS_MAIN)
OBJECTS_TEST3=$(BIN)/test3.o $(OBJECTS_MAIN)

# This target makes the shared object.
.PHONY: all
all: init $(OBJECTS_MAIN)
	$(CC) $(LDFLAGS) -shared -o $(BIN)/$(BINARY_SO) $(OBJECTS_MAIN) $(LDFLAGS)

.PHONY: test
test: init $(OBJECTS_TEST)
	$(CC) $(LDFLAGS) -o $(BIN)/$(BINARY_EXEC) $(OBJECTS_TEST) $(LDFLAGS)

.PHONY: test2
test2: init $(OBJECTS_TEST2)
	$(CC) $(LDFLAGS) -o $(BIN)/$(BINARY_EXEC) $(OBJECTS_TEST2) $(LDFLAGS)

.PHONY: test3
test3: init $(OBJECTS_TEST3)
	$(CC) $(LDFLAGS) -o $(BIN)/$(BINARY_EXEC) $(OBJECTS_TEST3) $(LDFLAGS)

.PHONY: init
init:
	mkdir -p $(BIN)
	
#-----------------------------------------------------------------------------
# Target `install':
#	Installs the generated shared object and the header files into the 
# 	destined directories (/usr/lib and /usr/include/GP2D). Sudo rights are
#   necessary to run this.
#-----------------------------------------------------------------------------
.PHONY: install
install:
	mkdir -p /usr/local/include/GP2D
	cp $(SRC)/*.h /usr/local/include/GP2D
	cp $(BIN)/libgp2d.dll /usr/local/lib/libgp2d.dll
	cp $(BIN)/libgp2d.dll /usr/local/bin/libgp2d.dll

.PHONY: uninstall
uninstall:
	rm -rf /usr/local/include/GP2D
	rm /usr/local/lib/libgp2d.dll
	rm /usr/local/bin/libgp2d.dll
	
#-----------------------------------------------------------------------------
# Target `clean':
#	Cleans the generated object files by deleting the 'bin' dir.
#-----------------------------------------------------------------------------
.PHONY: clean
clean:
	rm -rf ./bin
	
#-----------------------------------------------------------------------------
# The actual targets for compiling individual source files (along with their
# dependencies) are starting from here. Why did I write it like this? Well,
# mainly because it is very helpful in compiling it for testing purposes. 
# If a source file is not changed, it won't be compiled. Speedier compile times!
#
# And every target starts with $(BIN)/ because the `all` target refers to the 
# $(BIN)/xxx.o stuff too.
#-----------------------------------------------------------------------------
$(BIN)/core.o: $(SRC)/core.cpp $(SRC)/core.h
	$(CC) $(CFLAGS) -c $(SRC)/core.cpp -o $(BIN)/core.o

$(BIN)/input.o: $(SRC)/input.cpp $(SRC)/input.h
	$(CC) $(CFLAGS) -c $(SRC)/input.cpp -o $(BIN)/input.o

$(BIN)/graphics.o: $(SRC)/graphics.cpp $(SRC)/graphics.h
	$(CC) $(CFLAGS) -c $(SRC)/graphics.cpp -o $(BIN)/graphics.o

$(BIN)/framerate.o: $(SRC)/framerate.cpp $(SRC)/framerate.h
	$(CC) $(CFLAGS) -c $(SRC)/framerate.cpp -o $(BIN)/framerate.o

$(BIN)/text.o: $(SRC)/text.cpp $(SRC)/text.h
	$(CC) $(CFLAGS) -c $(SRC)/text.cpp -o $(BIN)/text.o

$(BIN)/collision.o: $(SRC)/collision.cpp $(SRC)/collision.h
	$(CC) $(CFLAGS) -c $(SRC)/collision.cpp -o $(BIN)/collision.o

$(BIN)/audio.o: $(SRC)/audio.cpp $(SRC)/audio.h
	$(CC) $(CFLAGS) -c $(SRC)/audio.cpp -o $(BIN)/audio.o

$(BIN)/timer.o: $(SRC)/timer.cpp $(SRC)/timer.h
	$(CC) $(CFLAGS) -c $(SRC)/timer.cpp -o $(BIN)/timer.o
	
$(BIN)/physics.o: $(SRC)/physics.cpp $(SRC)/physics.h
	$(CC) $(CFLAGS) -c $(SRC)/physics.cpp -o $(BIN)/physics.o
	
$(BIN)/test.o: $(SRC)/test.cpp
	$(CC) $(CFLAGS) -c $(SRC)/test.cpp -o $(BIN)/test.o

$(BIN)/test2.o: $(SRC)/test2.cpp
	$(CC) $(CFLAGS) -c $(SRC)/test2.cpp -o $(BIN)/test2.o

$(BIN)/test3.o: $(SRC)/test3.cpp
	$(CC) $(CFLAGS) -c $(SRC)/test3.cpp -o $(BIN)/test3.o
