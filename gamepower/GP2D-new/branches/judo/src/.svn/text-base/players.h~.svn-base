/*! \file players.h
\Players class and related

Used to process actions and movement of players
*/

#ifndef IT_PLAYERS_H
#define IT_PLAYERS_H

#include <string>

#include "gp2d.h"

#include "physics.h"
#include "weapons.h"

using namespace gp2d;

namespace iteam	{

class iteamPlayer : public physSolidObject
{

public:

    iteamWeapon* m_weapon;

    iteamPlayer(GP2DTexture* texture);

    ~iteamPlayer();

    void setName(std::string name);


private:

    // identification variables
    std::string  m_name;
    std::string  m_team;
    std::string  m_vehicle;

    // attack variables
    GLfloat      m_shootingAngle;
    GLfloat      m_shootingPower;

    // movement variables
    GLfloat      m_jumpingPower;
    bool         m_canMove;
    bool         m_canJump;

    // other
    unsigned int m_health;
    bool         m_facingRight;

};

class playerManager
{

public:

	/*
	 * Now public by popular demand.
     * This should make some things easier, like accessing weapons.
	 */
	std::map<unsigned short int, iteamPlayer*> m_players; // list of players, the heart of this manager
    iteamPlayer*                               m_currentPlayer;

	/*
	 * Constructor
	 */
	playerManager(void);

	/*
	 * Destructor
	 */
	~playerManager(void);

    /*
     * Call on this function in the main loop.
     */
    void main(void);

	/*
	 * Set a players attributes.
	 *
	 * @param name The name of the player
	 * @param xCoord The x-coordinate the player is originally placed at
	 * @param yCoord The y-coordinate the player is originally placed at; keep
	 *     in mind that, being a physical object, it will fall to the ground,
	 *     but, if placed below ground, it will probably cause some problems, so
	 *     do be careful.
	 */
	void setAttributes(unsigned short int player, std::string name,
					   int xCoord, int yCoord);

	/*
	 * Add a player to the manager.
	 *
	 * @param texture A GP2DTexture that the player will display
	 *
	 * @return The unsigned short int that represents the player in this class'
	 *         map of players.  It's a good idea to keep track of that number.
	 */
	unsigned short int addPlayer(GP2DTexture* texture);

private:

	unsigned short int                                m_playerCount; // number of players, also used to set locations in m_players

    GP2DCollisionManager*                             m_collisionManager;

    std::map<unsigned short int, GP2DPixelCollision*> m_collisions;

};

} // namespace iteam

#endif

