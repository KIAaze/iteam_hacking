2008-07-22 Azzkikr <krpors@users.sf.net>
    * collision.cpp/collision.h: Refactored collisions to be in a seperate
    file. Added pixel based collisions, as a start. Try out the test01 cpp
    testcase to see it. Also removed some const stuff in the collision 
    classes. Prototypish, but it looks cool.

2008-07-13 Azzkikr <krpors@users.sf.net>
    * text.cpp: Mainly 'optimized' the rendering of the text. Also made sure
    the texture mapping 'clamps' or something. Repetitiveness of the texture
    down the y axis will not happen anymore. 
    * graphics.h: Commented the GP2DColor class. Should be finalized by now.
    * graphics.cpp: Made changes in the glTranslatef() routine in GP2DSprite.
    I don't know who coded it, but transformation, and using the window's
    height and width is just unnecessary and results in weird, unlogical
    behaviour. 
    * text.cpp: Added the same change with glTranslatef().

2008-07-11 Azzkikr <krpors@users.sf.net>
	* text.h/text.cpp: Added a prepareTexture() function which does the same 
	as initFromSurface() from GP2DTexture. I removed that last function btw
	since it was very GP2DText specific. 
	* graphics.h/graphics.cpp: Removed initFromSurface.

2008-07-07 Azzkikr <krpors@users.sf.net>
    * text.h/text.cpp: Re-coded the GP2DText object to inherit from GP2DObject
    again due to complications regarding performance of the class. Now, setText
    only sets the text, and re-creates the texture. The draw() function only 
    draws the texture, so calling draw() only consequently has no "real"
    implications in the performance of the app.
    * graphics.h/graphics.cpp: Added one function to GP2DTexture called
    initFromSurface, which creates an OpenGL texture based on a given SDL
    surface. Right now, it seems to only work with surfaces created with
    TTF_Render_*, and not with a surface converted using the function 
    SDL_DisplaySurfaceAlpha (I wanted to reuse this function in the ctor of
    GP2DTexture: the surface parameter would be the image loaded - does not
    seem to work. Please fix this because the initFromSurface function is
    SDL_ttf specific at this moment, which is undesirable!!!!

2008-07-03 Azzkikr <krpors@users.sf.net>
	* text.h/text.cpp: extended GP2DText from GP2DSprite instead of GP2DObject.
	The draw() function is now inherited, and does not need to be coded twice.
	For this, I had to make the m_texture of GP2DSprite protected, so any other
	subclasses have direct access to it (instead of using getTexture() - not 
	sure if this is better, I think I will be removing this in the future). 
	The internal GP2DText texture will be deleted upon calling the destructor.
	
	Also added support for rendering text in three ways: solid (normal), shaded
	(nice) and blended (nicest). See the function member of GP2DText.
	
	* graphics.h/graphics.cpp: Added a class GP2DColor, which can be used to
	hold color data. A sort of mapping of SDL_Color.

2008-07-02 Azzkikr <krpors@users.sf.net>
	* text.h/text.cpp: Changed GP2DFont to represent a single font only, not
	a map of fonts. This is because fonts can be changed in size too, and this
	has to be managed per-font instance (TTF_Font*). They are constructed using
	the same font file etc, but a different point size is given. We'll need a
	GP2FontManager or something to hold all these font objects I guess.
	
	Added style setting to a GP2DFont too (FONT_BOLD, FONT_ITALIC, 
	FONT_UNDERLINE etc.).
	
	Also made sure that whenever a GP2DFont object is destroyed, the destructor
	makes sure that the TTF_Font* is unloaded as well. Good work DARKGuy, it 
	works very well :D

    * graphics.cpp: Fixed a very nasty memory leak which came up after I tested
    the font rendering with large fonts. See GP2DTexture::setSurface().

2008-07-01 Azzkikr <krpors@users.sf.net>
    * graphics.h/graphics.cpp: Here I added support for adding bounding boxes 
    to the given textures. Raises the question why the texture are not added 
    to a GP2DObject or a GP2DSprite - I will come back to that at a later time.
    Vector added and manipulators at GP2DTexture to add bounding boxes. A 
    function named computeEdges() has been added too, and in GP2DSprite, I
    programmed the displaying of the edges by drawing a point for every tiny
    bounding box. Execute the result of "test.cpp" to see what I'm talking 
    aboot. 

    KIAaze: sorry, but I had to revert the graphics.cpp file to a previous
    version, because like I said: the indentation and convention is gone
    awry. I also didn't see the *real* reason about the #ifndefs, so please
    care to inform us on that?

2008-06-30 DARKGuy <dark.guy.2008@gmail.com>
    * Various: Well there have been various changes. Most notably ones are the
    fix for the background color setting in OpenGL (which wasn't even added),
    text functions, a new test3.cpp for doing tests and text.cpp/text.h files.
    These are the files that do all the text magic. Using SDL_TTF (which you
    guys should install from now on) it does exactly as we discussed a few days
    ago, it creates a surface and puts text on it, it updates the OpenGL texture
    and displays it on screen with a draw() function. It seems to be pretty fast,
    at least in OpenGL... SDL is another matter :(.

    This should be enough for starting to make an on-screen framerate counter,
    and debugging collision coordinates and flags. For using text, PLEASE look
    at test3.cpp for an example on how to use text -and- display integers (or
    any other variable type) into a string in realtime.

    I've also added new fancy functions to graphics.cpp, to delete an OpenGL
    texture (free it) so it wouldn't create a new OGL texture for each text
    update (!) and another to set a new surface, so you can edit an SDL surface
    (or create a new one), call updateSurface() on your OpenGL texture and it
    will update pretty fast.

    Also, don't forget to edit the ChangeLog file!!... it helps to have it
    updated guys...

    Other than that, we can start working on collisions now, hopefully ;).

2008-06-21 DARKGuy <dark.guy.2008@gmail.com>
    * framerate.cpp/framerate.h: Added Judo's framerate limiter based on the
    old code and changed it so it would have the same format as the other
    classes, following Azzkikr's OOP style. The library compiles... now it needs
    an example program!
    * graphics.cpp: Fixed a small typo bug.

2008-03-18 DARKGuy <dark.guy.2008@gmail.com>
    * core.cpp: Pixel collision tests under SDL.

2008-03-17 DARKGuy <dark.guy.2008@gmail.com>
    * graphics.cpp/graphics.h: Added a few comments for the new functions. Also
    I've fixed a small "bug" that was related to getting a GP2DWindow instance
    inside itself - pretty useless, thanks for pointing that out Azzkikr :).

2008-03-16 DARKGuy <dark.guy.2008@gmail.com>
    * graphics.cpp: Added a white border around sprites in SDL mode.

2008-03-16 DARKGuy <dark.guy.2008@gmail.com>
    * graphics.cpp: Okay, sprites are working with the same rendering aspect in
    OpenGL and SDL. Camera works perfectly too. By Azzkikr's suggestion in IRC
    I was able to make a GP2DWindow::getCamera() function instead, so the camera
    class was renamed back from GP2DCameraClass to GP2DCamera :).
    
    The code needs a bit of comments and range checking when accessing the
    camera vector in the getCamera() function, but I'll do that later.

2008-03-16 DARKGuy <dark.guy.2008@gmail.com>
    * graphics.cpp/graphics.h: Moved the whole camera class to a vector inside
    GP2DWindow, this way, every window can have an unlimited number of cameras.
    Also, I've duplicated the functions in GP2DCameraClass inside GP2DWindow.
    It's silly, but I don't know of any other way to "pass" the class functions
    to the user directly without accessing m_camera directly (and it can't).
    
    CHECKPOINT! :D
    
    OpenGL's camera range now fits the SDL's "camera range" too! values are:
    
    Range: 384
    Sprite's X&Y in relation to range: X-512 and Y+384. I don't know if this
    is resolution-independent, but it works. Just as long as nobody changes
    the camera range for doing any "camera zoom" iteam actions, we're safe.
    
    The coordinates are such because 1024/2=512 and 768/2=384, so we should use
    window->getWidth()/2 and window->getHeight()/2 instead.

2008-03-12 DARKGuy <dark.guy.2008@gmail.com>
    * graphics.cpp: Fixed sprite movement as velocity wasn't being taken into
    account when drawing the sprite in SDL mode. I had to add:
    
    setX(getX() + getVelocity_X());
    setY(getY() + getVelocity_Y());
    
    So the coordinates were corrected.

2008-03-11 DARKGuy <dark.guy.2008@gmail.com>
    * susi.png: There is no susi. I took the one from KIAaze's branch and put
    it in there instead.

2008-03-11 Azzkikr <krpors@users.sf.net>
    * susi.png: uploaded a new version of this one. The other was borked or 
    something. It made OpenGL display a black outline instead of the gray one.
    Not sure what happened there.
    * (graphics.cpp, graphics.h): Added prototype for GP2DPixelCollisions. These
    are to work with the GP2DSprite objects.
    * test.cpp: removed the black cube. Use a branch next time to screw around
    in plzkthx.

2008-03-11 DARKGuy <dark.guy.2008@gmail.com>
    * ChangeLog: Fixed my email address.
    * graphics.cpp/graphics.h: Added the back surface for doing the background
    clearing (only in SDL rendering mode) so sprites don't leave a trail when
    they move. Background is set to black by default, and I've made a function
    to change the color, and to return the background surface.

2008-03-10 DARKGuy <dark.guy.2008@gmail.com>
    * graphics.cpp: Fixed the rendering of SDL sprites. Flipping buffers work,
    but an image is need to be made in order to do the flipping on, else, the 
    sprites will leave a trail when they move or rotate or anything on the
    screen. I'm at work and 180% sleepy, so I can't even think how to implement
    such "black screen" to do the flipping on without messing with OpenGL and
    create it only when in SDL and not in OpenGL (so memory isn't wasted) but
    I'll leave that for tomorrow or somebody else who wants to take this up.
    I've done my share for today ^^.
    * ChangeLog: Fixed a changelog's date (my last entry was 2008-03-10 when
    it should've been 03-09, theorically, even though the commit was made at
    like 5-6 am xD.

2008-03-09 DARKGuy <dark.guy.2008@gmail.com>
    * graphics.h: Fixed GL2D_OPENGL to GP2D_OPENGL, typo! :P
    * test2.cpp/Makefile.linux32: Created test2.cpp for my own testing
    purposes without interfering with the other test.cpp file.
    * graphics.cpp: What's with all the cube-drawing routines o.O??
    * graphics.h/graphics.cpp: Added getSurface() for GP2DWindow so it could
    return the screen surface in order to do the blitting.
    * graphics.h/graphics.cpp: Implemented SDL drawing routine for sprites.
    IT ISN'T STABLE as it needs a bit more fixing. This is just a quick svn
    commit for something that hasn't been done yet.

2008-02-24 Azzkikr <krpors@users.sf.net>
    * graphics.h: Removed circular dependencies for usage with core.h for 
    collision stuff. 
    * core.cpp: Added collision routines (basic stuff). This commit was actually
    just so I can test the fixing of the segfault in GP2DTexture's destructor.
    Code is not finished in core.cpp with the collisions and all, so mind that!
	* graphics.cpp: Fixed the segfault in GP2DTexture. 

2008-02-14 Azzkikr <krpors@users.sf.net>
    * graphics.h: Added the enumeration GP2DRenderMode which holds values of 
    modes to render (SDL/OpenGL).
    * graphics.cpp: Previous version was disfunctional because during 
    construction of GP2DWindow, a m_videomode was set to only SDL_HWPALETTE.
    When using OpenGL, we need SDL_HWPALETTE | SDL_OPENGL, or else rendering
    won't work one bit. 
    * gp2d.h: Removed constant externs. They are now the GP2DRenderMode enum.
      

2008-02-06 DARKGuy <dark.guy2008@gmail.com>
    * gp2d.h: removed the global variable g_videoAPI.
    * graphics.cpp: removed the declaration of g_videoAPI.
    * graphics.cpp/graphics.h: added a function called getAPI() for getting the
    graphic API to use.
    * graphics.cpp: replaced every g_videoAPI check with getting the instance
    of the GP2DWindow in a variable and checking for its API.

2008-02-05 Azzkikr <krpors@users.sf.net>
    * core.h: Added some commentary to the functions (initX)
    * core.cpp: Changed the (initX) functions signatures to match a throw 
    statement which is also being used in the core.h headerfile.
    * graphics.cpp: (GP2DTexture) Removed redundant check if a file exists to 
    throw an exception. It is already being thrown in the existing exception, 
    but it can be retrieved by calling GP2DException.getDetail() on the caught 
    exception (try/catch block).
    

2008-02-05 DARKGuy <dark.guy.2008@gmail.com>
    * gp2d.h: Created file. Also modified all the cpp/h files to include the
    headerfile GP2D only.
    * gp2d.h/gp2d.cpp: renamed these to core.cpp and core.h
    * gp2d.h: added GP2D_SDL=0 and GP2D_OpenGL=1 for either SDL or OpenGL
    usage.
    * graphics.h/cpp: Added setSDL() and setOpenGL() for setting the different
    API's for the engine to use.
    * graphics.cpp: Modified the current functions to make use of the SDL or
    OpenGL rendering type.
    * graphics.cpp: Added a member variable and function in GP2DTexture to
    have and return the SDL_Surface struct. This is to be used when the video
    API is set to SDL.
    * graphics.cpp: Made the error message more explicit when the texture is
    not loaded.
    * core.cpp: Added fileExists() function in order to do the check when
    loading a texture to see if the file can be found or not.
