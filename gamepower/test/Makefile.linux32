CC=g++ -g

#-----------------------------------------------------------------------------
# CFLAGS: Used for compiling. Includes the -I flag to add a pointer to the
# necessary header files, and includes the -L flag to point to the generated
# libgp2d.so shared object file.
#-----------------------------------------------------------------------------
CFLAGS=-fPIC \
        `sdl-config --cflags` \
        -Wall -O2 \
        -I../src \
        -L../bin

#-----------------------------------------------------------------------------
# LDFLAGS: Used for the linker. These libraries also include the libgp2d.so
# file, which is expected in the ../bin/ directory (a result of the build of
# the GP2D framework.
#-----------------------------------------------------------------------------
LDFLAGS=`sdl-config --libs` \
        -lSDL \
        -lSDLmain \
        -lSDL_net \
        -lSDL_mixer \
        -lSDL_image \
        -lSDL_gfx \
        -lSDL_ttf \
        -lGL \
        -lGLU \
        -lgp2d

#-----------------------------------------------------------------------------
# A few variables:
# 	BIN: the location where the binaries (*.o and executables) need to be
#	SRC: the source directory of the test.cpp's.
#-----------------------------------------------------------------------------
BIN=./bin
SRC=./src

#-----------------------------------------------------------------------------
# The list of 'object' targets to generate.
#-----------------------------------------------------------------------------
OBJECTS_MAIN=${BIN}/test01.o ${BIN}/test02.o ${BIN}/test03.o ${BIN}/test04.o ${BIN}/test05.o ${BIN}/test06.o ${BIN}/test07.o

#-----------------------------------------------------------------------------
# Target `all':
#	Builds the test files to objects, to executables.
#-----------------------------------------------------------------------------
.PHONY: all
all: init $(OBJECTS_MAIN)

#-----------------------------------------------------------------------------
# Target `init':
#	Does pre-initialization before building anything, in this case creating a
#	directory to hold the binaries.
#-----------------------------------------------------------------------------
.PHONY: init
init:
	@mkdir -p $(BIN)

#-----------------------------------------------------------------------------
# Target `clean':
#	Cleans the generated object files by deleting the 'bin' dir.
#-----------------------------------------------------------------------------
.PHONY: clean
clean:
	rm -rf ./bin

#-----------------------------------------------------------------------------
# Target for the objects:
#	Compiles the object files out of the source files.
#-----------------------------------------------------------------------------
$(BIN)/test01.o: $(SRC)/test01.cpp
	$(CC) $(CFLAGS) -c $(SRC)/test01.cpp -o $(BIN)/test01.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(BIN)/test01 $(BIN)/test01.o

$(BIN)/test02.o: $(SRC)/test02.cpp
	$(CC) $(CFLAGS) -c $(SRC)/test02.cpp -o $(BIN)/test02.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(BIN)/test02 $(BIN)/test02.o

$(BIN)/test03.o: $(SRC)/test03.cpp
	$(CC) $(CFLAGS) -c $(SRC)/test03.cpp -o $(BIN)/test03.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(BIN)/test03 $(BIN)/test03.o

$(BIN)/test04.o: $(SRC)/test04.cpp
	$(CC) $(CFLAGS) -c $(SRC)/test04.cpp -o $(BIN)/test04.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(BIN)/test04 $(BIN)/test04.o

$(BIN)/test05.o: $(SRC)/test05.cpp
	$(CC) $(CFLAGS) -c $(SRC)/test05.cpp -o $(BIN)/test05.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(BIN)/test05 $(BIN)/test05.o

$(BIN)/test06.o: $(SRC)/test06.cpp
	$(CC) $(CFLAGS) -c $(SRC)/test06.cpp -o $(BIN)/test06.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(BIN)/test06 $(BIN)/test06.o

$(BIN)/test07.o: $(SRC)/test07.cpp
	$(CC) $(CFLAGS) -c $(SRC)/test07.cpp -o $(BIN)/test07.o
	$(CC) $(CFLAGS) $(LDFLAGS) -o $(BIN)/test07 $(BIN)/test07.o
